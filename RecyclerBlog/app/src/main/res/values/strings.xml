<resources>
    <string name="app_name">RecyclerBlog</string>

    <string name="data">A thin wrapper around a millisecond value that allows JDBC to identify
        this as an SQL DATE value. A millisecond value represents the number of milliseconds that
        have passed since January 1, 1970 to conform with the definition of SQL DATE, the
        millisecond values wrapped by a java.sql.DAte instance must be normalized by setting the
        hours, minutes, seconds and milliseconds to zero in the particular time
    </string>

    <string name="rating">
        A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars.
        The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar.
        The smaller RatingBAr style (R.attr.ratingBarStyleSmall) and the larger indicator-only style
        (R.attr.ratingBarStyleIndicator) do not support user interaction and should only be used as indicator
        when using a RatingBar that supports user interaction, placing widgets to the left or right of the RatingBar
        is discouraged
    </string>

    <string name="edit">
        A TextView displays text to the user and optionally allows the to edit it. A TextView is a
        complete text editor, however the basic class is configured to not allow editing
    </string>

    <string name="camera">
        The Android framework includes support for various cameras and camera features available on devices,
        allowing you to capture pictures and videos in your applications. This document discusses a quick,
        simple approach to image and video capture and outlines an advanced approach for creating custom camera
        experiences for your users
    </string>

    <string name="recyclerView">
        RecyclerView is the ViewGroup that contains the views corresponding to your data its a view itself
        so you and RecyclerView added to the android studio as a successor of the GridView and ListView
        It is an improvement on both of them and can be found in the latest v-7 support packages.
        It has been created to make possible construction of any lists with XML layouts as an item
        which can be customized vastly while improving on the efficiency of ListViews and GridViews
    </string>

    <string name="RView">
        RecyclerView is a ViewGroup successor GridView and ListView

        implementation: we need three sub-parts to be constructed i.e The Card Layout, THe ViewHolder, The Date Class
        THE CARD LAYOUT: The card layout is an XML layout which will be treated as an item for the list created by the
                         RecyclerView.
        THE VIEW-HOLDER: is a java class that stores the reference to the card layout views that have to be dynamically
        modified during the execution of the program by a list of data obtained either by online databases or added in
        some other way like local storage
        THE DATA CLASS: is a custom java class that acts as a structure for holding the information for every item
        of the RecyclerView
        THE ADAPTER: here is the main code responsible for RecyclerVIew. it holds all the important methods
        dealing with the implementation of RecyclerView

        The Basic methods for a successful Adapter:
        onCreateViewHolder: which deals with the inflation of the card layout as an item for the RecyclerView

        onBindViewHolder: which deals with the setting of different data and methods related to clicks on particular
                          items of the RecyclerView

        getItemCount: which Returns the length of the RecyclerView.
        onAttachedTORecyclerView: which is attaches the adapter to the RecyclerView
    </string>

</resources>